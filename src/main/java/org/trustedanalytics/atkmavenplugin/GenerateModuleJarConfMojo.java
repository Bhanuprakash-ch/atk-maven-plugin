/*
// Copyright (c) 2015 Intel Corporation 
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

package org.trustedanalytics.atkmavenplugin;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import com.typesafe.config.ConfigValueFactory;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.artifact.DefaultArtifact;
import org.eclipse.aether.collection.CollectRequest;
import org.eclipse.aether.graph.Dependency;
import org.eclipse.aether.graph.DependencyNode;
import org.eclipse.aether.repository.RemoteRepository;
import org.eclipse.aether.resolution.DependencyRequest;
import org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Generate atk-module-generated.conf
 *
 * @goal generate-conf
 * @phase process-sources
 */
public class GenerateModuleJarConfMojo extends AbstractMojo {

    /**
     * output filename
     */
    private static final String OUTPUT_FILENAME = "atk-module-generated.conf";

    /**
     * The 'runtime' maven scope
     */
    private static final String RUNTIME_SCOPE = "runtime";

    /**
     * classes dir under target
     */
    private static final String CLASSES_DIR_NAME = "classes";

    /**
     * comment to add to generated config
     */
    private static final String ORIGIN_DESCRIPTION = "generated by atk-maven-plugin";

    /**
     * keys used in generated conf
     */
    private static final String JAR_NAMES_KEY = "atk.module.jar-names";
    private static final String BUILD_CLASSPATH_KEY = "atk.module.build-classpath";

    /**
     * The Maven Project
     *
     * @parameter default-value="${project}"
     * @readonly
     * @required
     */
    private MavenProject project;

    /**
     * Location of the file.
     *
     * @parameter default-value="${project.build.directory}"
     * @readonly
     * @required
     */
    private File outputDirectory;

    /**
     * The entry point to Aether, i.e. the component doing all the work.
     *
     * @component
     */
    private RepositorySystem repoSystem;

    /**
     * The current repository/network configuration of Maven.
     *
     * @parameter default-value="${repositorySystemSession}"
     * @readonly
     */
    private RepositorySystemSession repoSession;

    /**
     * The project's remote repositories to use for the resolution of project dependencies.
     *
     * @parameter default-value="${project.remoteProjectRepositories}"
     * @readonly
     */
    private List<RemoteRepository> projectRepos;

    /**
     * Generate atk-module-generated.conf
     */
    public void execute() throws MojoExecutionException {

        try {
            File classesDir = new File(outputDirectory, CLASSES_DIR_NAME);
            if (!classesDir.exists()) {
                if (!classesDir.mkdirs()) {
                    throw new IOException("failed to create directory " + classesDir.getAbsolutePath());
                }
            }

            String coords = project.getGroupId() + ":" + project.getArtifactId() + ":" + project.getVersion();
            Dependency dependency = new Dependency(new DefaultArtifact(coords), RUNTIME_SCOPE);

            CollectRequest collectRequest = new CollectRequest();
            collectRequest.setRoot(dependency);
            for (RemoteRepository repo : projectRepos) {
                collectRequest.addRepository(repo);
            }

            DependencyNode node = repoSystem.collectDependencies(repoSession, collectRequest).getRoot();

            DependencyRequest dependencyRequest = new DependencyRequest();
            dependencyRequest.setRoot(node);

            repoSystem.resolveDependencies(repoSession, dependencyRequest);

            PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
            node.accept(nlg);

            List<String> values = new ArrayList<String>();
            for (org.eclipse.aether.artifact.Artifact a : nlg.getArtifacts(false)) {
                values.add(a.getFile().getName());
            }

            Config config = ConfigFactory.empty()
                    .withValue(JAR_NAMES_KEY, ConfigValueFactory.fromIterable(values, ORIGIN_DESCRIPTION))
                    .withValue(BUILD_CLASSPATH_KEY, ConfigValueFactory.fromAnyRef(nlg.getClassPath(), ORIGIN_DESCRIPTION));

            File configFile = new File(classesDir, OUTPUT_FILENAME);
            String contents = config.root().render();
            writeFile(configFile, contents);

        } catch (Exception e) {
            throw new MojoExecutionException("failed to generate " + OUTPUT_FILENAME, e);
        }
    }

    /**
     * Write the supplied contents to the supplied File location
     */
    private void writeFile(File file, String contents) throws MojoExecutionException {
        FileWriter w = null;
        try {
            w = new FileWriter(file);
            w.write(contents);
        } catch (IOException e) {
            throw new MojoExecutionException("Error creating file: " + file.getAbsolutePath(), e);
        } finally {
            if (w != null) {
                try {
                    w.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }
    }

}
